// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel SetPositions
#pragma kernel Initialize

// The positions of each point in world space (?)
RWStructuredBuffer<float3> _Positions;

RWStructuredBuffer<float> _Times;

float _XLength;
float _YLength;
float _ZLength;

int _NumberOfPoints;

float _Lifespan;
//float _DeltaTime;
float _Time;

// The matrix that takes points from local space to world space
float4x4 _LocalToWorldMatrix;





void NewPosition(uint index) // D
{
    float4 localPos;
    localPos.x = fmod(0.35180 * index + 100 * _Time + 0.21453, _XLength);
    localPos.y = fmod(1.84202 * index + 100 * _Time +  0.12411, _YLength);
    localPos.z = fmod(1.15151 * index + 100 * _Time + 0.78544, _ZLength);
    localPos.w = 1.0;
    
    _Positions[index] = mul(_LocalToWorldMatrix, localPos).xyz;
}


[numthreads(64, 1, 1)]
void Initialize(uint3 id : SV_DispatchThreadID)
{
    uint index = id.x;
    if (index < (uint) _NumberOfPoints) // Triggers correctly now
    {
        NewPosition(index);
        _Times[index] = _Time + fmod(5.82452 * index + 1.72111, _Lifespan);
    }
}

[numthreads(64, 1, 1)]
void SetPositions(uint3 id : SV_DispatchThreadID)
{
    if (id.x < (uint) _NumberOfPoints)
    {
        if (_Time > _Times[id.x])
        {
            NewPosition(id.x);
            _Times[id.x] = _Time + _Lifespan;
        }
    }
}

