// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel InitializePositions
#pragma kernel ComputePositions

// Six entries: the distance of one of the particles in each stream from its starting position. 
// Value is positive for a positive divergence component, negative for a negative divergence component
RWStructuredBuffer<float> _Distances;
// Single entry, ith component holds dfi/dxi
StructuredBuffer<float3> _Divergence;

// The (worldspace) distance that each particle will travel before disappearing. 
float _TravelDistance;
float _DeltaTime;





float IDToAxis(uint3 id) {
    return id.x / ((uint) 2);
}

[numthreads(6,1,1)]
void InitializePositions (uint3 id : SV_DispatchThreadID) {
    // The divergence along this axis (hopefully)
    float div = _Divergence[0][IDToAxis(id)];
    if (div != 0)
    {
        _Distances[id.x] = 0.1 * div;
    }
    else
    {
        _Distances[id.x] = 0;
    }
    
}


[numthreads(6,1,1)]
void ComputePositions (uint3 id : SV_DispatchThreadID)
{
    // The divergence along this axis (hopefully)
    float div = _Divergence[0][IDToAxis(id)];
    
    if (_Distances[id.x] * div < 0) // Check if opposite signs 
    {
        _Distances[id.x] *= -1;
    }
    _Distances[id.x] = fmod(_Distances[id.x] + div * _DeltaTime * 0.05, _TravelDistance);
}
