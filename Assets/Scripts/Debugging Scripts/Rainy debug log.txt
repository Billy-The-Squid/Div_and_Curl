/*
As of commit:
* Both times and positions update during the Initialize kernel call. Positions currently update according to C, successfully.
Next test: do the times update after elapsed time?
 * for this: ignoring positions, commenting out both conditionals in kernel SetPositions.
 * result: times do update correctly.

Test: Uncomment _Time test conditional kernel SetPositions (leave unchanged other comments)
* Difficult to read. Commenting out first debug call int C# method "Initialize"
* commenting out positions data
* results: updates once, then noise more.

Reversed direction of conditional in Kernel SetPositions.
* Now updating properly.

Test: Uncomment (id.bool1x1 < (uint) _NumberOfPoints) test int kernel SetPositions.
* Behavior is still acceptable.

Test: uncomment PRand (still no call), examine time data.
* Nevermind, it was already uncommented.

Test: Comment out debug data for SetPositions call, examine only Initialize kernel, both before and after.
* _Time is initialized with seemingly random value. Use as starting seed?
Uncommenting positions debug data, commenting out time debug data. Keeping _Times buffer, though.
* As expected, data updates after first frame with C values.

Test: Switch to B.
* First three points: (1.0, 0.0, 0.0)(2.0, 1.0, 1.0)(1.0, 0.0, 0.0)
* Last three points: (2.0, 1.0, 1.0)(1.0, 0.0, 0.0)(2.0, 1.0, 1.0)
* As expected.

Test: Switch to D.
* Additive constants needed so that index 0 isn't always at zero. Updating that...
* Satisfactory.

Test: Comment out changing positions in kernel SetPositions. Comment out debug tests in Initialize, uncomment tests in SetPositions method.
Comment out time arrays. Verify that positions are fixed wrt time.
* Positions remain constant: verified

Are vectors being plotted?
* No, perhaps because debugger doesn't have display.

Test: disable debugger Rainy component, re-enable VectorField (1).
* Initialization errors. Fixing...

Fixed, and changed field type off of Coulomb. Vectors now plotting.

Adding Time component to D.
* No change. Uncomment line in SetPositions...m

Vectors now blink roughly every two seconds. Adding time variation to initialization...
* Slightly glitchy. Regular jumps. m
*/


static float mod = pow(2, 31) - 1;
static float coef = pow(2, 30) - 1;



float PRand(float seed)
{ // returns a value between zero and mod.
    return fmod((coef * seed + 1001 * _Time + 11), mod);
}

//float PRand(float seed)
//{
//    return fmod(seed + 100000 * _Time, mod);
//}

//float PRand(float seed)
//{
//    return seed;
//}

//void NewPosition(uint index) // A
//{
//    float4 localPos;
//    localPos.x = fmod(PRand((float) index), _XLength);
//    localPos.y = fmod(PRand(localPos.x), _YLength);
//    localPos.z = fmod(PRand(localPos.y), _ZLength);
//    localPos.w = 1.0;

//    _Positions[index] = mul(_LocalToWorldMatrix, localPos).xyz;
//}

//void NewPosition(uint index) // B
//{
//    float4 localPos;
//    localPos.x = fmod((float) index, _XLength);
//    localPos.y = fmod((float) index, _YLength);
//    localPos.z = fmod((float) index, _ZLength);
//    localPos.w = 1.0;

//    _Positions[index] = mul(_LocalToWorldMatrix, localPos).xyz;
//}

//void NewPosition(uint index) // C
//{
//    float4 localPos;
//    localPos.x = index + 3.0;
//    localPos.y = index + 2.0;
//    localPos.z = index + 1.0;
//    localPos.w = 1.0;
//    _Positions[index] = localPos.xyz;

//    _Positions[index] = mul(_LocalToWorldMatrix, localPos).xyz; // Also works.
//}
